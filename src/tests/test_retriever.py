
# Generated by CodiumAI
from modules.retriever import ChromaRetriever


# Dependencies:
# pip install pytest-mock
import pytest

class TestChromaRetriever:

    # Tests that the method retrieves a Chroma collection with a valid name and returns a retriever object with default search parameters.
    def test_retrieve_collection_with_valid_name(self, mocker):
        # Mock the necessary dependencies
        mocker.patch('chromadb.Client.get_collection', return_value=True)
        mocker.patch('langchain.vectorstores.Chroma.as_retriever', return_value=True)
    
        # Create an instance of ChromaRetriever
        retriever = ChromaRetriever()
    
        # Call the method under test
        result = retriever.fromExistingCollection('valid_collection')
    
        # Assert the expected result
        assert result == True

    # Tests that the method raises a ValueError when no collection name is provided.
    def test_raise_value_error_when_no_collection_name_provided(self, mocker):
        # Create an instance of ChromaRetriever
        retriever = ChromaRetriever()
    
        # Call the method under test and assert the expected exception
        with pytest.raises(ValueError):
            retriever.fromExistingCollection()

    # Tests that the method raises a ValueError when a non-existent collection name is provided.
    def test_raise_value_error_when_nonexistent_collection_name_provided(self, mocker):
        # Mock the necessary dependencies
        mocker.patch('chromadb.Client.get_collection', return_value=None)
    
        # Create an instance of ChromaRetriever
        retriever = ChromaRetriever(None)
    
        # Call the method under test and assert the expected exception
        with pytest.raises(ValueError):
            retriever.fromExistingCollection('nonexistent_collection')